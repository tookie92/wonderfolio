schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "categories"
"""
type categories {
  description: String!
  id: Int!
  name: String!

  """An array relationship"""
  works(
    """distinct select on columns"""
    distinct_on: [works_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [works_order_by!]

    """filter the rows returned"""
    where: works_bool_exp
  ): [works!]!

  """An aggregate relationship"""
  works_aggregate(
    """distinct select on columns"""
    distinct_on: [works_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [works_order_by!]

    """filter the rows returned"""
    where: works_bool_exp
  ): works_aggregate!
}

"""
aggregated selection of "categories"
"""
type categories_aggregate {
  aggregate: categories_aggregate_fields
  nodes: [categories!]!
}

"""
aggregate fields of "categories"
"""
type categories_aggregate_fields {
  avg: categories_avg_fields
  count(columns: [categories_select_column!], distinct: Boolean): Int!
  max: categories_max_fields
  min: categories_min_fields
  stddev: categories_stddev_fields
  stddev_pop: categories_stddev_pop_fields
  stddev_samp: categories_stddev_samp_fields
  sum: categories_sum_fields
  var_pop: categories_var_pop_fields
  var_samp: categories_var_samp_fields
  variance: categories_variance_fields
}

"""aggregate avg on columns"""
type categories_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "categories". All fields are combined with a logical 'AND'.
"""
input categories_bool_exp {
  _and: [categories_bool_exp!]
  _not: categories_bool_exp
  _or: [categories_bool_exp!]
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  works: works_bool_exp
}

"""
unique or primary key constraints on table "categories"
"""
enum categories_constraint {
  """unique or primary key constraint"""
  categories_pkey
}

"""
input type for incrementing numeric columns in table "categories"
"""
input categories_inc_input {
  id: Int
}

"""
input type for inserting data into table "categories"
"""
input categories_insert_input {
  description: String
  id: Int
  name: String
  works: works_arr_rel_insert_input
}

"""aggregate max on columns"""
type categories_max_fields {
  description: String
  id: Int
  name: String
}

"""aggregate min on columns"""
type categories_min_fields {
  description: String
  id: Int
  name: String
}

"""
response of any mutation on the table "categories"
"""
type categories_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [categories!]!
}

"""
input type for inserting object relation for remote table "categories"
"""
input categories_obj_rel_insert_input {
  data: categories_insert_input!

  """on conflict condition"""
  on_conflict: categories_on_conflict
}

"""
on conflict condition type for table "categories"
"""
input categories_on_conflict {
  constraint: categories_constraint!
  update_columns: [categories_update_column!]! = []
  where: categories_bool_exp
}

"""Ordering options when selecting data from "categories"."""
input categories_order_by {
  description: order_by
  id: order_by
  name: order_by
  works_aggregate: works_aggregate_order_by
}

"""primary key columns input for table: categories"""
input categories_pk_columns_input {
  id: Int!
}

"""
select columns of table "categories"
"""
enum categories_select_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "categories"
"""
input categories_set_input {
  description: String
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type categories_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type categories_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type categories_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type categories_sum_fields {
  id: Int
}

"""
update columns of table "categories"
"""
enum categories_update_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type categories_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type categories_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type categories_variance_fields {
  id: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "categories"
  """
  delete_categories(
    """filter the rows which have to be deleted"""
    where: categories_bool_exp!
  ): categories_mutation_response

  """
  delete single row from the table: "categories"
  """
  delete_categories_by_pk(id: Int!): categories

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: Int!): users

  """
  delete data from the table: "works"
  """
  delete_works(
    """filter the rows which have to be deleted"""
    where: works_bool_exp!
  ): works_mutation_response

  """
  delete single row from the table: "works"
  """
  delete_works_by_pk(id: Int!): works

  """
  insert data into the table: "categories"
  """
  insert_categories(
    """the rows to be inserted"""
    objects: [categories_insert_input!]!

    """on conflict condition"""
    on_conflict: categories_on_conflict
  ): categories_mutation_response

  """
  insert a single row into the table: "categories"
  """
  insert_categories_one(
    """the row to be inserted"""
    object: categories_insert_input!

    """on conflict condition"""
    on_conflict: categories_on_conflict
  ): categories

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users

  """
  insert data into the table: "works"
  """
  insert_works(
    """the rows to be inserted"""
    objects: [works_insert_input!]!

    """on conflict condition"""
    on_conflict: works_on_conflict
  ): works_mutation_response

  """
  insert a single row into the table: "works"
  """
  insert_works_one(
    """the row to be inserted"""
    object: works_insert_input!

    """on conflict condition"""
    on_conflict: works_on_conflict
  ): works

  """
  update data of the table: "categories"
  """
  update_categories(
    """increments the numeric columns with given value of the filtered values"""
    _inc: categories_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: categories_set_input

    """filter the rows which have to be updated"""
    where: categories_bool_exp!
  ): categories_mutation_response

  """
  update single row of the table: "categories"
  """
  update_categories_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: categories_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: categories_set_input
    pk_columns: categories_pk_columns_input!
  ): categories

  """
  update data of the table: "users"
  """
  update_users(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update data of the table: "works"
  """
  update_works(
    """increments the numeric columns with given value of the filtered values"""
    _inc: works_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: works_set_input

    """filter the rows which have to be updated"""
    where: works_bool_exp!
  ): works_mutation_response

  """
  update single row of the table: "works"
  """
  update_works_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: works_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: works_set_input
    pk_columns: works_pk_columns_input!
  ): works
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "categories"
  """
  categories(
    """distinct select on columns"""
    distinct_on: [categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_order_by!]

    """filter the rows returned"""
    where: categories_bool_exp
  ): [categories!]!

  """
  fetch aggregated fields from the table: "categories"
  """
  categories_aggregate(
    """distinct select on columns"""
    distinct_on: [categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_order_by!]

    """filter the rows returned"""
    where: categories_bool_exp
  ): categories_aggregate!

  """fetch data from the table: "categories" using primary key columns"""
  categories_by_pk(id: Int!): categories

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users

  """An array relationship"""
  works(
    """distinct select on columns"""
    distinct_on: [works_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [works_order_by!]

    """filter the rows returned"""
    where: works_bool_exp
  ): [works!]!

  """An aggregate relationship"""
  works_aggregate(
    """distinct select on columns"""
    distinct_on: [works_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [works_order_by!]

    """filter the rows returned"""
    where: works_bool_exp
  ): works_aggregate!

  """fetch data from the table: "works" using primary key columns"""
  works_by_pk(id: Int!): works
}

type subscription_root {
  """
  fetch data from the table: "categories"
  """
  categories(
    """distinct select on columns"""
    distinct_on: [categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_order_by!]

    """filter the rows returned"""
    where: categories_bool_exp
  ): [categories!]!

  """
  fetch aggregated fields from the table: "categories"
  """
  categories_aggregate(
    """distinct select on columns"""
    distinct_on: [categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [categories_order_by!]

    """filter the rows returned"""
    where: categories_bool_exp
  ): categories_aggregate!

  """fetch data from the table: "categories" using primary key columns"""
  categories_by_pk(id: Int!): categories

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users

  """An array relationship"""
  works(
    """distinct select on columns"""
    distinct_on: [works_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [works_order_by!]

    """filter the rows returned"""
    where: works_bool_exp
  ): [works!]!

  """An aggregate relationship"""
  works_aggregate(
    """distinct select on columns"""
    distinct_on: [works_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [works_order_by!]

    """filter the rows returned"""
    where: works_bool_exp
  ): works_aggregate!

  """fetch data from the table: "works" using primary key columns"""
  works_by_pk(id: Int!): works
}

"""
columns and relationships of "users"
"""
type users {
  adresse: String!
  email: String!
  function: String!
  id: Int!
  name: String!
  role: String!

  """An array relationship"""
  works(
    """distinct select on columns"""
    distinct_on: [works_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [works_order_by!]

    """filter the rows returned"""
    where: works_bool_exp
  ): [works!]!

  """An aggregate relationship"""
  works_aggregate(
    """distinct select on columns"""
    distinct_on: [works_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [works_order_by!]

    """filter the rows returned"""
    where: works_bool_exp
  ): works_aggregate!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""aggregate avg on columns"""
type users_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  adresse: String_comparison_exp
  email: String_comparison_exp
  function: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  role: String_comparison_exp
  works: works_bool_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  users_pkey
}

"""
input type for incrementing numeric columns in table "users"
"""
input users_inc_input {
  id: Int
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  adresse: String
  email: String
  function: String
  id: Int
  name: String
  role: String
  works: works_arr_rel_insert_input
}

"""aggregate max on columns"""
type users_max_fields {
  adresse: String
  email: String
  function: String
  id: Int
  name: String
  role: String
}

"""aggregate min on columns"""
type users_min_fields {
  adresse: String
  email: String
  function: String
  id: Int
  name: String
  role: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """on conflict condition"""
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  adresse: order_by
  email: order_by
  function: order_by
  id: order_by
  name: order_by
  role: order_by
  works_aggregate: works_aggregate_order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: Int!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  adresse

  """column name"""
  email

  """column name"""
  function

  """column name"""
  id

  """column name"""
  name

  """column name"""
  role
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  adresse: String
  email: String
  function: String
  id: Int
  name: String
  role: String
}

"""aggregate stddev on columns"""
type users_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type users_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type users_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type users_sum_fields {
  id: Int
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  adresse

  """column name"""
  email

  """column name"""
  function

  """column name"""
  id

  """column name"""
  name

  """column name"""
  role
}

"""aggregate var_pop on columns"""
type users_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type users_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type users_variance_fields {
  id: Float
}

"""
columns and relationships of "works"
"""
type works {
  categorie_id: Int!

  """An object relationship"""
  category: categories!
  description: String!
  id: Int!
  image_url: String!
  name: String!

  """An object relationship"""
  user: users!
  user_id: Int!
}

"""
aggregated selection of "works"
"""
type works_aggregate {
  aggregate: works_aggregate_fields
  nodes: [works!]!
}

"""
aggregate fields of "works"
"""
type works_aggregate_fields {
  avg: works_avg_fields
  count(columns: [works_select_column!], distinct: Boolean): Int!
  max: works_max_fields
  min: works_min_fields
  stddev: works_stddev_fields
  stddev_pop: works_stddev_pop_fields
  stddev_samp: works_stddev_samp_fields
  sum: works_sum_fields
  var_pop: works_var_pop_fields
  var_samp: works_var_samp_fields
  variance: works_variance_fields
}

"""
order by aggregate values of table "works"
"""
input works_aggregate_order_by {
  avg: works_avg_order_by
  count: order_by
  max: works_max_order_by
  min: works_min_order_by
  stddev: works_stddev_order_by
  stddev_pop: works_stddev_pop_order_by
  stddev_samp: works_stddev_samp_order_by
  sum: works_sum_order_by
  var_pop: works_var_pop_order_by
  var_samp: works_var_samp_order_by
  variance: works_variance_order_by
}

"""
input type for inserting array relation for remote table "works"
"""
input works_arr_rel_insert_input {
  data: [works_insert_input!]!

  """on conflict condition"""
  on_conflict: works_on_conflict
}

"""aggregate avg on columns"""
type works_avg_fields {
  categorie_id: Float
  id: Float
  user_id: Float
}

"""
order by avg() on columns of table "works"
"""
input works_avg_order_by {
  categorie_id: order_by
  id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "works". All fields are combined with a logical 'AND'.
"""
input works_bool_exp {
  _and: [works_bool_exp!]
  _not: works_bool_exp
  _or: [works_bool_exp!]
  categorie_id: Int_comparison_exp
  category: categories_bool_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  image_url: String_comparison_exp
  name: String_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "works"
"""
enum works_constraint {
  """unique or primary key constraint"""
  works_pkey
}

"""
input type for incrementing numeric columns in table "works"
"""
input works_inc_input {
  categorie_id: Int
  id: Int
  user_id: Int
}

"""
input type for inserting data into table "works"
"""
input works_insert_input {
  categorie_id: Int
  category: categories_obj_rel_insert_input
  description: String
  id: Int
  image_url: String
  name: String
  user: users_obj_rel_insert_input
  user_id: Int
}

"""aggregate max on columns"""
type works_max_fields {
  categorie_id: Int
  description: String
  id: Int
  image_url: String
  name: String
  user_id: Int
}

"""
order by max() on columns of table "works"
"""
input works_max_order_by {
  categorie_id: order_by
  description: order_by
  id: order_by
  image_url: order_by
  name: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type works_min_fields {
  categorie_id: Int
  description: String
  id: Int
  image_url: String
  name: String
  user_id: Int
}

"""
order by min() on columns of table "works"
"""
input works_min_order_by {
  categorie_id: order_by
  description: order_by
  id: order_by
  image_url: order_by
  name: order_by
  user_id: order_by
}

"""
response of any mutation on the table "works"
"""
type works_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [works!]!
}

"""
on conflict condition type for table "works"
"""
input works_on_conflict {
  constraint: works_constraint!
  update_columns: [works_update_column!]! = []
  where: works_bool_exp
}

"""Ordering options when selecting data from "works"."""
input works_order_by {
  categorie_id: order_by
  category: categories_order_by
  description: order_by
  id: order_by
  image_url: order_by
  name: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: works"""
input works_pk_columns_input {
  id: Int!
}

"""
select columns of table "works"
"""
enum works_select_column {
  """column name"""
  categorie_id

  """column name"""
  description

  """column name"""
  id

  """column name"""
  image_url

  """column name"""
  name

  """column name"""
  user_id
}

"""
input type for updating data in table "works"
"""
input works_set_input {
  categorie_id: Int
  description: String
  id: Int
  image_url: String
  name: String
  user_id: Int
}

"""aggregate stddev on columns"""
type works_stddev_fields {
  categorie_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "works"
"""
input works_stddev_order_by {
  categorie_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type works_stddev_pop_fields {
  categorie_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "works"
"""
input works_stddev_pop_order_by {
  categorie_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type works_stddev_samp_fields {
  categorie_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "works"
"""
input works_stddev_samp_order_by {
  categorie_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type works_sum_fields {
  categorie_id: Int
  id: Int
  user_id: Int
}

"""
order by sum() on columns of table "works"
"""
input works_sum_order_by {
  categorie_id: order_by
  id: order_by
  user_id: order_by
}

"""
update columns of table "works"
"""
enum works_update_column {
  """column name"""
  categorie_id

  """column name"""
  description

  """column name"""
  id

  """column name"""
  image_url

  """column name"""
  name

  """column name"""
  user_id
}

"""aggregate var_pop on columns"""
type works_var_pop_fields {
  categorie_id: Float
  id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "works"
"""
input works_var_pop_order_by {
  categorie_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type works_var_samp_fields {
  categorie_id: Float
  id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "works"
"""
input works_var_samp_order_by {
  categorie_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type works_variance_fields {
  categorie_id: Float
  id: Float
  user_id: Float
}

"""
order by variance() on columns of table "works"
"""
input works_variance_order_by {
  categorie_id: order_by
  id: order_by
  user_id: order_by
}

